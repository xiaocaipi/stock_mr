package com.sourcelearning.dataguru

import org.apache.spark.streaming.StreamingContext
import org.apache.spark.streaming.Seconds
import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import org.apache.spark.storage.StorageLevel
import org.apache.log4j.Logger
import org.apache.log4j.Level
import org.apache.spark.rdd.RDD
import org.apache.spark.sql.SQLContext

object StreamingTest {
  def main(args: Array[String]): Unit = {
    Logger.getRootLogger.setLevel(Level.ERROR)
    SqlNetworkWordCount
  }
  
  
  def test1(): Unit = {
     // 定义一个sparkcontext，本地调试 开多个线程，对sparkstreaming 最好大于2个  一个监听一个处理
    val sparkConf = new SparkConf().setAppName("HdfsWordCount").setMaster("local[2]")
    // 定义StreamingContext  20秒来处理一次，20秒对数据流来切分一次
    val ssc = new StreamingContext(sparkConf, Seconds(20))
    //接受的目录是这里采用的是本地文件系统,对这个目录进行监视，一旦有新的文件进来，sparkstreaming 开始读入这个文件
    val lines = ssc.textFileStream("/tmp/test1/")
    //进行切片
    val words = lines.flatMap(_.split(" "))
    //然后进行统计
    val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)
    //每一个时间段里面进行统计 进行打印
    wordCounts.print()
    ssc.start()
    ssc.awaitTermination()

  }
  
  def NetworkWordCount:Unit ={
     val conf = new SparkConf().setAppName("NetworkWordCount").setMaster("local[2]")
    val sc = new SparkContext(conf)
    //这里是5秒钟做一个数据的切分，发送程序是1秒钟发送一次，这样切分一次就有5条记录
    val ssc = new StreamingContext(sc, Seconds(5))
  //socketTextStream  这里读取网络的接口，一个是服务器
    val lines = ssc.socketTextStream("127.0.0.1",9000.toInt, StorageLevel.MEMORY_AND_DISK_SER)
    val words = lines.flatMap(_.split(","))
    val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)

    wordCounts.print()
    ssc.start()
    ssc.awaitTermination()

  }
  
  def StatefulWordCount:Unit ={
    //stateful进行操作要先建立一个update的function，有2个值，一个是values 新进来的值，state 是状态，是要进行统计的值，上一次进行统计的值
    val updateFunc = (values: Seq[Int], state: Option[Int]) => {
     //要把新的值加进来
      val currentCount = values.foldLeft(0)(_ + _)
    //getOrElse 如果是空的话，那么就是0
      val previousCount = state.getOrElse(0)
    //返回一个新的值
      Some(currentCount + previousCount)
    }

    val conf = new SparkConf().setAppName("StatefulWordCount").setMaster("local[2]")
    val sc = new SparkContext(conf)

    //创建StreamingContext  5秒钟对数据流进行一次切分
    val ssc = new StreamingContext(sc, Seconds(5))
    //设置一个checkpoint  目录是当前的目录，计算的时候不止用到当前切分的一小块数据，而且要用以前的数据，累计下来以前的数据非常多，要checkpoint，减少内存消耗
    ssc.checkpoint(".")

    //获取数据，也是从网络获取数据
    val lines = ssc.socketTextStream("127.0.0.1",9000.toInt)
    val words = lines.flatMap(_.split(","))
    val wordCounts = words.map(x => (x, 1))

    //在dstream使用updateStateByKey来更新状态，在updateStateByKey 使用update function
    val stateDstream = wordCounts.updateStateByKey[Int](updateFunc)
//    stateDstream.print()
    lines.print()
    ssc.start()
    ssc.awaitTermination()

    
  }
  
  
  def SqlNetworkWordCount :Unit={
     // Create the context with a 2 second batch size
    val sparkConf = new SparkConf().setAppName("SqlNetworkWordCount").setMaster("local[2]")
    val ssc = new StreamingContext(sparkConf, Seconds(2))

    // Create a socket stream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    // Note that no duplication in storage level only for running locally.
    // Replication necessary in distributed scenario for fault tolerance.
    val lines = ssc.socketTextStream("127.0.0.1",9000.toInt, StorageLevel.MEMORY_AND_DISK_SER)
    val words = lines.flatMap(_.split(" "))

    // Convert RDDs of the words DStream to DataFrame and run SQL query
    words.foreachRDD((rdd: RDD[String]) => {
      // Get the singleton instance of SQLContext
      val sqlContext = SQLContextSingleton.getInstance(rdd.sparkContext)
      import sqlContext.implicits._

      // Convert RDD[String] to RDD[case class] to DataFrame
      val wordsDataFrame = rdd.map(w => Record(w)).toDF()

      // Register as table
      wordsDataFrame.registerTempTable("words")
      

      // Do word count on table using SQL and print it
      val wordCountsDataFrame =
        sqlContext.sql("select word, count(*) as total from words group by word")
      wordCountsDataFrame.printSchema()
    })

    ssc.start()
    ssc.awaitTermination()
  }
}

case class Record(word: String)

object SQLContextSingleton {

  @transient  private var instance: SQLContext = _

  def getInstance(sparkContext: SparkContext): SQLContext = {
    if (instance == null) {
      instance = new SQLContext(sparkContext)
    }
    instance
  }
}
